import TABLE from require "ZF.util.table"
import UTIL  from require "ZF.util.util"

class CONFIG

    -- checks if a file or folder exists
    fileExist: (file, dir) =>
        file ..= "/" if dir
        ok, err, code = os.rename(file, file)
        unless ok
            return true if code == 13
        return ok, err

    -- creates one or more new directories
    mkdir: (dir) =>
        assert dir, "expected dir"
        unless @fileExist dir, true
            os.execute "mkdir #{dir}"

    -- deletes one or more folders
    rmdir: (dir) =>
        assert dir, "expected dir"
        if @fileExist dir, true
            os.execute "rd /s /q #{dir}"

    -- converts the gui to string and writes it to a text file
    writeGui: (dir, gui) =>
        write = (content) ->
            written = ""
            for name, value in pairs content
                written ..= "#{name}:#{value}|"
            written = written\sub 1, -2
            return written

        local written
        if type(gui) == "table"
            written = write gui

        file = io.open dir, "w"
        file\write written
        file\close!

        return written

    -- reads the string generated by the writeGui function
    readGui: (dir) =>
        split = (content) ->
            result, values = {}, UTIL\getHeadTail content, "|"
            for _, value in ipairs values
                set = UTIL\getHeadTail value, ":"

                conc = table.concat set, "", 2
                conc = conc == "true" and true or (tonumber(conc) and tonumber(conc) or conc)

                result[set[1]] = conc

            return result

        if arq = io.open dir, "r"
            read = arq\read "*a"
            arq\close!
            return split read

    -- loads the lines contained in the saved file
    loadGui: (gui, macro_name) =>
        macro_name = macro_name\lower!
        dir, new, read = "zeref-cfg\\#{macro_name\gsub("%s", "_")}.config", TABLE(gui)\copy!

        if read = @readGui dir
            for k, v in ipairs new
                v.value = read[v.name] if v.name

        return new, read

    -- saves the contents of an interface to a file
    saveGui: (gui, macro_name) =>
        macro_name = macro_name\lower!
        @mkdir "zeref-cfg"

        dir = "zeref-cfg\\#{macro_name\gsub("%s", "_")}.config"
        written = @writeGui dir, gui

        return written

{:CONFIG}